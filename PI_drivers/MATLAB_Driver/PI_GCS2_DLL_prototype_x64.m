function [methodinfo,structs,enuminfo,ThunkLibName]=PI_GCS2_DLL_prototype_x64
%PI_GCS2_DLL_PROTOTYPE_X64 Create structures to define interfaces found in 'PI_GCS2_DLL'.

%This function was generated by loadlibrary.m parser version  on Mon Nov 13 11:21:07 2023
%perl options:'PI_GCS2_DLL.i -outfile=PI_GCS2_DLL_prototype_x64.m -thunkfile=PI_thunk_pcwin64.c -header=PI_GCS2_DLL.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'PI_thunk_pcwin64');
% int  PI_InterfaceSetupDlg ( const char * szRegKeyName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='PI_InterfaceSetupDlg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  PI_ConnectRS232 ( int nPortNr , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_ConnectRS232'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  PI_TryConnectRS232 ( int port , int baudrate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_TryConnectRS232'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  PI_TryConnectUSB ( const char * szDescription ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='PI_TryConnectUSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_IsConnecting ( int threadID , BOOL * bCOnnecting ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_IsConnecting'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  PI_GetControllerID ( int threadID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_GetControllerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CancelConnect ( int threadID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_CancelConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_OpenRS232DaisyChain ( int iPortNumber , int iBaudRate , int * pNumberOfConnectedDaisyChainDevices , char * szDeviceIDNs , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_OpenRS232DaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_ConnectDaisyChainDevice ( int iPortId , int iDeviceNumber ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_ConnectDaisyChainDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void  PI_CloseDaisyChain ( int iPortId ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='PI_CloseDaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_ConnectNIgpib ( int nBoard , int nDevAddr ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_ConnectNIgpib'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  PI_ConnectTCPIP ( const char * szHostname , int port ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='PI_ConnectTCPIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_EnableTCPIPScan ( int iMask ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_EnableTCPIPScan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_EnumerateTCPIPDevices ( char * szBuffer , int iBufferSize , const char * szFilter ); 
fcns.thunkname{fcnNum}='int32cstringint32cstringThunk';fcns.name{fcnNum}='PI_EnumerateTCPIPDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  PI_ConnectTCPIPByDescription ( const char * szDescription ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='PI_ConnectTCPIPByDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  PI_OpenTCPIPDaisyChain ( const char * szHostname , int port , int * pNumberOfConnectedDaisyChainDevices , char * szDeviceIDNs , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_OpenTCPIPDaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_StartDaisyChainScanTCPIP ( const char * szHostname , int port ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='PI_StartDaisyChainScanTCPIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_StartDaisyChainScanRS232 ( int iPortNumber , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_StartDaisyChainScanRS232'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  PI_StartDaisyChainScanUSB ( const char * szDescription ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='PI_StartDaisyChainScanUSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  PI_DaisyChainScanning ( int threadId , BOOL * scanning , double * progressPercentage ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_DaisyChainScanning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int  PI_GetDaisyChainID ( int threadId ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_GetDaisyChainID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_GetDevicesInDaisyChain ( int portId , int * numberOfDevices , char * buffer , int bufferSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_GetDevicesInDaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_StopDaisyChainScan ( int threadId ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_StopDaisyChainScan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_GetConnectedDaisyChains ( int * daisyChainIds , int nrDaisyChainsIds ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_GetConnectedDaisyChains'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  PI_GetNrConnectedDaisyChains (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='PI_GetNrConnectedDaisyChains'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void  PI_CloseAllDaisyChains (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='PI_CloseAllDaisyChains'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  PI_EnumerateUSB ( char * szBuffer , int iBufferSize , const char * szFilter ); 
fcns.thunkname{fcnNum}='int32cstringint32cstringThunk';fcns.name{fcnNum}='PI_EnumerateUSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  PI_ConnectUSB ( const char * szDescription ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='PI_ConnectUSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  PI_ConnectUSBWithBaudRate ( const char * szDescription , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='PI_ConnectUSBWithBaudRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_OpenUSBDaisyChain ( const char * szDescription , int * pNumberOfConnectedDaisyChainDevices , char * szDeviceIDNs , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_OpenUSBDaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_IsConnected ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_IsConnected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void  PI_CloseConnection ( int ID ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='PI_CloseConnection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_GetError ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_GetError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  PI_GetInitError (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='PI_GetInitError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL  PI_SetErrorCheck ( int ID , BOOL bErrorCheck ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_SetErrorCheck'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TranslateError ( int errNr , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_TranslateError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_SetTimeout ( int ID , int timeoutInMS ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_SetTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  PI_SetDaisyChainScanMaxDeviceID ( int maxID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_SetDaisyChainScanMaxDeviceID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_EnableReconnect ( int ID , BOOL bEnable ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_EnableReconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  PI_SetNrTimeoutsBeforeClose ( int ID , int nrTimeoutsBeforeClose ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_SetNrTimeoutsBeforeClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetInterfaceDescription ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_GetInterfaceDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void  PI_SetConnectTimeout ( int timeoutInMS ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='PI_SetConnectTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void  PI_EnableBaudRateScan ( BOOL enableBaudRateScan ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='PI_EnableBaudRateScan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qERR ( int ID , int * pnError ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qERR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qIDN ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qIDN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_INI ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_INI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qHLP ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qHLP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHPA ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qHPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHPV ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qHPV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qCSV ( int ID , double * pdCommandSyntaxVersion ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qCSV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qOVF ( int ID , const char * szAxes , BOOL * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qOVF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_RBT ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_RBT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_REP ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_REP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_BDR ( int ID , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_BDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qBDR ( int ID , int * iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qBDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_DBR ( int ID , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_DBR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDBR ( int ID , int * iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qDBR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qVER ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qVER'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSSN ( int ID , char * szSerialNumber , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qSSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CCT ( int ID , int iCommandType ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_CCT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qCCT ( int ID , int * iCommandType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qCCT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qTVI ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qTVI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_IFC ( int ID , const char * szParameters , const char * szValues ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_IFC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qIFC ( int ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qIFC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_IFS ( int ID , const char * szPassword , const char * szParameters , const char * szValues ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringThunk';fcns.name{fcnNum}='PI_IFS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qIFS ( int ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qIFS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qECO ( int ID , const char * szSendString , char * szValues , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qECO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_MOV ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_MOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qMOV ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qMOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_MVR ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_MVR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_MVE ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_MVE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_POS ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_POS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qPOS ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qPOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_IsMoving ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_IsMoving'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_HLT ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_HLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_STP ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_STP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_STF ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_STF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_StopAll ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_StopAll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qONT ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qONT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_RTO ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_RTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qRTO ( int ID , const char * szAxes , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qRTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_ATZ ( int ID , const char * szAxes , const double * pdLowvoltageArray , const BOOL * pfUseDefaultArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_ATZ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qATZ ( int ID , const char * szAxes , int * piAtzResultArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qATZ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_AOS ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_AOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qAOS ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qAOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_HasPosChanged ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_HasPosChanged'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_GetErrorStatus ( int ID , BOOL * pbIsReferencedArray , BOOL * pbIsReferencing , BOOL * pbIsMovingArray , BOOL * pbIsMotionErrorArray ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_GetErrorStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SVA ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SVA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSVA ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSVA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_SVR ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SVR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_DFH ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_DFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qDFH ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qDFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_GOH ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_GOH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qCST ( int ID , const char * szAxes , char * szNames , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qCST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CST ( int ID , const char * szAxes , const char * szNames ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_CST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qVST ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qVST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qPUN ( int ID , const char * szAxes , char * szUnit , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qPUN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_EAX ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_EAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qEAX ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qEAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SVO ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSVO ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SMO ( int ID , const char * szAxes , const int * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSMO ( int ID , const char * szAxes , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_DCO ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_DCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qDCO ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qDCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_BRA ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_BRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qBRA ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qBRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_RON ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_RON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qRON ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qRON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_VEL ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_VEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qVEL ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qVEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_JOG ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_JOG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qJOG ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qJOG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qTCV ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qTCV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_VLS ( int ID , double dSystemVelocity ); 
fcns.thunkname{fcnNum}='int32int32doubleThunk';fcns.name{fcnNum}='PI_VLS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_qVLS ( int ID , double * pdSystemVelocity ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qVLS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_ACC ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_ACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qACC ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_DEC ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_DEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qDEC ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qDEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_VCO ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_VCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qVCO ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qVCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SPA ( int ID , const char * szItems , const unsigned int * iParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='PI_SPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSPA ( int ID , const char * szItems , unsigned int * iParameterArray , double * pdValueArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qSPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SEP ( int ID , const char * szPassword , const char * szItems , const unsigned int * iParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='PI_SEP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSEP ( int ID , const char * szItems , unsigned int * iParameterArray , double * pdValueArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qSEP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WPA ( int ID , const char * szPassword , const char * szItems , const unsigned int * iParameterArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_WPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_DPA ( int ID , const char * szPassword , const char * szItems , const unsigned int * iParameterArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_DPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_TIM ( int ID , double dTimer ); 
fcns.thunkname{fcnNum}='int32int32doubleThunk';fcns.name{fcnNum}='PI_TIM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_qTIM ( int ID , double * pdTimer ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTIM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_RPA ( int ID , const char * szItems , const unsigned int * iParameterArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_RPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SPA_String ( int ID , const char * szItems , const unsigned int * iParameterArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrcstringThunk';fcns.name{fcnNum}='PI_SPA_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSPA_String ( int ID , const char * szItems , const unsigned int * iParameterArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qSPA_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SEP_String ( int ID , const char * szPassword , const char * szItems , const unsigned int * iParameterArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrcstringThunk';fcns.name{fcnNum}='PI_SEP_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSEP_String ( int ID , const char * szItems , unsigned int * iParameterArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qSEP_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SPA_int64 ( int ID , const char * szItems , const unsigned int * iParameterArray , const long long * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_SPA_int64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPA_int64 ( int ID , const char * szItems , unsigned int * iParameterArray , long long * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qSPA_int64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SEP_int64 ( int ID , const char * szPassword , const char * szItems , const unsigned int * iParameterArray , const long long * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_SEP_int64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSEP_int64 ( int ID , const char * szItems , unsigned int * iParameterArray , long long * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qSEP_int64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_STE ( int ID , const char * szAxes , const double * dOffsetArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_STE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSTE ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSTE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_IMP ( int ID , const char * szAxes , const double * pdImpulseSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_IMP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_IMP_PulseWidth ( int ID , char cAxis , double dOffset , int iPulseWidth ); 
fcns.thunkname{fcnNum}='int32int32int8doubleint32Thunk';fcns.name{fcnNum}='PI_IMP_PulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qIMP ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qIMP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_SAI ( int ID , const char * szOldAxes , const char * szNewAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_SAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSAI ( int ID , char * szAxes , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qSAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSAI_ALL ( int ID , char * szAxes , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qSAI_ALL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CCL ( int ID , int iComandLevel , const char * szPassWord ); 
fcns.thunkname{fcnNum}='int32int32int32cstringThunk';fcns.name{fcnNum}='PI_CCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qCCL ( int ID , int * piComandLevel ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qCCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_AVG ( int ID , int iAverrageTime ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_AVG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qAVG ( int ID , int * iAverrageTime ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qAVG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qHAR ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qHAR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qLIM ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qLIM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qTRS ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qTRS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_FNL ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_FNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qFPH ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qFPH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_FPH ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_FPH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_FPL ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_FPL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_FRF ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_FRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_FED ( int ID , const char * szAxes , const int * piEdgeArray , const int * piParamArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_FED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qFRF ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qFRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_DIO ( int ID , const int * piChannelsArray , const BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_DIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDIO ( int ID , const int * piChannelsArray , BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qDIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTIO ( int ID , int * piInputNr , int * piOutputNr ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qTIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_IsControllerReady ( int ID , int * piControllerReady ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_IsControllerReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSRG ( int ID , const char * szAxes , const int * iRegisterArray , int * iValArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qSRG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_ATC ( int ID , const int * piChannels , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_ATC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qATC ( int ID , const int * piChannels , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qATC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qATS ( int ID , const int * piChannels , const int * piOptions , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qATS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SPI ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SPI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPI ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSPI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_SCT ( int ID , double dCycleTime ); 
fcns.thunkname{fcnNum}='int32int32doubleThunk';fcns.name{fcnNum}='PI_SCT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_qSCT ( int ID , double * pdCycleTime ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qSCT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_SST ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSST ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qCTV ( int ID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qCTV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_CTV ( int ID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_CTV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_CTR ( int ID , const char * szAxes , const double * pdValarray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_CTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qCAV ( int ID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qCAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qCCV ( int ID , const char * szAxes , double * pdValarray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qCCV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qCMO ( int ID , const char * szAxes , int * piValArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qCMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_CMO ( int ID , const char * szAxes , const int * piValArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_CMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_IsRunningMacro ( int ID , BOOL * pbRunningMacro ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_IsRunningMacro'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_BEG ( int ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_MAC_BEG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_START ( int ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_MAC_START'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_NSTART ( int ID , const char * szMacroName , int nrRuns ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_MAC_NSTART'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_START_Args ( int ID , const char * szMacroName , const char * szArgs ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_MAC_START_Args'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_NSTART_Args ( int ID , const char * szMacroName , int nrRuns , const char * szArgs ); 
fcns.thunkname{fcnNum}='int32int32cstringint32cstringThunk';fcns.name{fcnNum}='PI_MAC_NSTART_Args'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_END ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_MAC_END'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_DEL ( int ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_MAC_DEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_DEF ( int ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_MAC_DEF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_qDEF ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_MAC_qDEF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_qERR ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_MAC_qERR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_MAC_qFREE ( int ID , int * iFreeSpace ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_MAC_qFREE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qMAC ( int ID , const char * szMacroName , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qMAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qRMC ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qRMC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_DEL ( int ID , int nMilliSeconds ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_DEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WAC ( int ID , const char * szCondition ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_WAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_MEX ( int ID , const char * szCondition ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_MEX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_VAR ( int ID , const char * szVariable , const char * szValue ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_VAR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qVAR ( int ID , const char * szVariables , char * szValues , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qVAR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_ADD ( int ID , const char * szVariable , double value1 , double value2 ); 
fcns.thunkname{fcnNum}='int32int32cstringdoubledoubleThunk';fcns.name{fcnNum}='PI_ADD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_CPY ( int ID , const char * szVariable , const char * szCommand ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_CPY'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_GcsCommandset ( int ID , const char * szCommand ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_GcsCommandset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_GcsGetAnswer ( int ID , char * szAnswer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_GcsGetAnswer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GcsGetAnswerSize ( int ID , int * iAnswerSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_GcsGetAnswerSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qTMN ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qTMN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qTMX ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qTMX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_NLM ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_NLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qNLM ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qNLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_PLM ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_PLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qPLM ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qPLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_SSL ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSSL ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qVMO ( int ID , const char * szAxes , const double * pdValarray , BOOL * pbMovePossible ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qVMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qCMN ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qCMN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qCMX ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qCMX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_IsGeneratorRunning ( int ID , const int * piWaveGeneratorIds , BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_IsGeneratorRunning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTWG ( int ID , int * piWaveGenerators ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTWG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_WAV_SIN_P ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iCenterPointOfWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='PI_WAV_SIN_P'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WAV_LIN ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iNumberOfSpeedUpDownPointsInWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='PI_WAV_LIN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WAV_NOISE ( int ID , int iWaveTableId , int iAddAppendWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='PI_WAV_NOISE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WAV_SWEEP ( int ID , int iWaveTableId , int iAddAppendWave , unsigned int iStarFequencytValueInPoints , unsigned int iStopFrequencyValueInPoints , unsigned int nLengthOfWave , double dAmplitudeOfWave , double dOffsetOfWave ); 
fcns.thunkname{fcnNum}='int32int32int32int32uint32uint32uint32doubledoubleThunk';fcns.name{fcnNum}='PI_WAV_SWEEP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'uint32', 'uint32', 'uint32', 'double', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_WAV_RAMP ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iCenterPointOfWave , int iNumberOfSpeedUpDownPointsInWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='PI_WAV_RAMP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WAV_PNT ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , const double * pdWavePoints ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='PI_WAV_PNT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qWAV ( int ID , const int * piWaveTableIdsArray , const int * piParamereIdsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WGO ( int ID , const int * piWaveGeneratorIdsArray , const int * iStartModArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_WGO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWGO ( int ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWGO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WGC ( int ID , const int * piWaveGeneratorIdsArray , const int * piNumberOfCyclesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_WGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWGC ( int ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWGI ( int ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWGI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWGN ( int ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWGN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWGS ( int ID , int iWaveGeneratorId , const char * szItem , char * buffer , int bufferSize ); 
fcns.thunkname{fcnNum}='int32int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qWGS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WSL ( int ID , const int * piWaveGeneratorIdsArray , const int * piWaveTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_WSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWSL ( int ID , const int * piWaveGeneratorIdsArray , int * piWaveTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_DTC ( int ID , const int * piDdlTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_DTC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDTL ( int ID , const int * piDdlTableIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qDTL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WCL ( int ID , const int * piWaveTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_WCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTLT ( int ID , int * piNumberOfDdlTables ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qGWD_SYNC ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfValues , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qGWD_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qGWD ( int ID , const int * iWaveTableIdsArray , int iNumberOfWaveTables , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qGWD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WOS ( int ID , const int * iWaveTableIdsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_WOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWOS ( int ID , const int * iWaveTableIdsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WTR ( int ID , const int * piWaveGeneratorIdsArray , const int * piTableRateArray , const int * piInterpolationTypeArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_WTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWTR ( int ID , const int * piWaveGeneratorIdsArray , int * piTableRateArray , int * piInterpolationTypeArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_DDL ( int ID , int iDdlTableId , int iOffsetOfFirstPointInDdlTable , int iNumberOfValues , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='PI_DDL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qDDL_SYNC ( int ID , int iDdlTableId , int iOffsetOfFirstPointInDdlTable , int iNumberOfValues , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qDDL_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qDDL ( int ID , const int * iDdlTableIdsArray , int iNumberOfDdlTables , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qDDL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_DPO ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_DPO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qWMS ( int ID , const int * piWaveTableIds , int * iWaveTableMaximumSize , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qWMS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TWE ( int ID , const int * piWaveTableIdsArray , const int * piWaveTableStartIndexArray , const int * piWaveTableEndIndexArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_TWE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTWE ( int ID , const int * piWaveTableIdsArray , int * piWaveTableStartIndexArray , int * piWaveTableEndIndexArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTWE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TWC ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_TWC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TWS ( int ID , const int * piTriggerChannelIdsArray , const int * piPointNumberArray , const int * piSwitchArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_TWS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTWS ( int ID , const int * iTriggerChannelIdsArray , int iNumberOfTriggerChannels , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qTWS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CTO ( int ID , const int * piTriggerOutputIds , const int * piTriggerParameterArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_CTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CTOString ( int ID , const int * piTriggerOutputIds , const int * piTriggerParameterArray , const char * szValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_CTOString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qCTO ( int ID , const int * piTriggerOutputIds , const int * piTriggerParameterArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qCTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qCTOString ( int ID , const int * piTriggerOutputIds , const int * piTriggerParameterArray , char * szValueArray , int iArraySize , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='PI_qCTOString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TRO ( int ID , const int * piTriggerOutputIds , const BOOL * pbTriggerState , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_TRO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTRO ( int ID , const int * piTriggerOutputIds , BOOL * pbTriggerState , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTRO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TRI ( int ID , const int * piTriggerInputIds , const BOOL * pbTriggerState , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_TRI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTRI ( int ID , const int * piTriggerInputIds , BOOL * pbTriggerState , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTRI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CTI ( int ID , const int * piTriggerInputIds , const int * piTriggerParameterArray , const char * szValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_CTI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qCTI ( int ID , const int * piTriggerInputIds , const int * piTriggerParameterArray , char * szValueArray , int iArraySize , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='PI_qCTI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHDR ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qHDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTNR ( int ID , int * piNumberOfRecordCannels ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTNR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_DRC ( int ID , const int * piRecordTableIdsArray , const char * szRecordSourceIds , const int * piRecordOptionArray ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='PI_DRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qDRC ( int ID , const int * piRecordTableIdsArray , char * szRecordSourceIds , int * piRecordOptionArray , int iRecordSourceIdsBufferSize , int iRecordOptionArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringvoidPtrint32int32Thunk';fcns.name{fcnNum}='PI_qDRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring', 'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDRR_SYNC ( int ID , int iRecordTablelId , int iOffsetOfFirstPointInRecordTable , int iNumberOfValues , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qDRR_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qDRR ( int ID , const int * piRecTableIdIdsArray , int iNumberOfRecTables , int iOffsetOfFirstPointInRecordTable , int iNumberOfValues , double ** pdValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qDRR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_DRT ( int ID , const int * piRecordChannelIdsArray , const int * piTriggerSourceArray , const char * szValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_DRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDRT ( int ID , const int * piRecordChannelIdsArray , int * piTriggerSourceArray , char * szValues , int iArraySize , int iValueBufferLength ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='PI_qDRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_RTR ( int ID , int piReportTableRate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_RTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qRTR ( int ID , int * piReportTableRate ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qRTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_WGR ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_WGR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDRL ( int ID , const int * piRecordChannelIdsArray , int * piNuberOfRecordedValuesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qDRL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WFR ( int ID , const char * szAxis , int iMode , double dAmplitude , double dLowFrequency , double dHighFrequency , int iNumberOfFrequencies ); 
fcns.thunkname{fcnNum}='int32int32cstringint32doubledoubledoubleint32Thunk';fcns.name{fcnNum}='PI_WFR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'double', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qWFR ( int ID , const char * szAxis , int iMode , double ** pbValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qWFR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_VMA ( int ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_VMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qVMA ( int ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qVMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_VMI ( int ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_VMI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qVMI ( int ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qVMI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_VOL ( int ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_VOL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qVOL ( int ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qVOL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTPC ( int ID , int * piNumberOfPiezoChannels ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTPC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_ONL ( int ID , const int * iPiezoCannels , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_ONL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qONL ( int ID , const int * iPiezoCannels , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qONL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTAD ( int ID , const int * piSensorsChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTAD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTNS ( int ID , const int * piSensorsChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTNS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TSP ( int ID , const int * piSensorsChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_TSP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTSP ( int ID , const int * piSensorsChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTSP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SCN ( int ID , const int * piSensorsChannelsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_SCN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSCN ( int ID , const int * piSensorsChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qSCN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTSC ( int ID , int * piNumberOfSensorChannels ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTSC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_APG ( int ID , const int * piPIEZOWALKChannelsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_APG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qAPG ( int ID , const int * piPIEZOWALKChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qAPG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OAC ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_OAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOAC ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OAD ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_OAD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOAD ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOAD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_ODC ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_ODC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qODC ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qODC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OCD ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_OCD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOCD ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOCD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OSM ( int ID , const int * piPIEZOWALKChannelsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_OSM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOSM ( int ID , const int * piPIEZOWALKChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOSM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OSMf ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_OSMf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOSMf ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOSMf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OSMstringIDs ( int ID , const char * szAxisOrChannelIds , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_OSMstringIDs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qOSMstringIDs ( int ID , const char * szAxisOrChannelIds , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qOSMstringIDs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_OVL ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_OVL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOVL ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOVL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOSN ( int ID , const int * piPIEZOWALKChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qOSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qOSNstringIDs ( int ID , const char * szAxisOrChannelIds , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qOSNstringIDs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SSA ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_SSA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSSA ( int ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qSSA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_RNP ( int ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_RNP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_PGS ( int ID , const int * piPIEZOWALKChannelsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_PGS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTAC ( int ID , int * pnNrChannels ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qTAV ( int ID , const int * piChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OMA ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_OMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qOMA ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qOMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_OMR ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_OMR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qJAS ( int ID , const int * iJoystickIDsArray , const int * iAxesIDsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qJAS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_JAX ( int ID , int iJoystickID , int iAxesID , const char * szAxesBuffer ); 
fcns.thunkname{fcnNum}='int32int32int32int32cstringThunk';fcns.name{fcnNum}='PI_JAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qJAX ( int ID , const int * iJoystickIDsArray , const int * iAxesIDsArray , int iArraySize , char * szAxesBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32cstringint32Thunk';fcns.name{fcnNum}='PI_qJAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qJBS ( int ID , const int * iJoystickIDsArray , const int * iButtonIDsArray , BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qJBS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_JDT ( int ID , const int * iJoystickIDsArray , const int * iAxisIDsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_JDT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_JLT ( int ID , int iJoystickID , int iAxisID , int iStartAdress , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_JLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qJLT ( int ID , const int * iJoystickIDsArray , const int * iAxisIDsArray , int iNumberOfTables , int iOffsetOfFirstPointInTable , int iNumberOfValues , double ** pdValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qJLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_JON ( int ID , const int * iJoystickIDsArray , const BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_JON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qJON ( int ID , const int * iJoystickIDsArray , BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qJON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_AAP ( int ID , const char * szAxis1 , double dLength1 , const char * szAxis2 , double dLength2 , double dAlignStep , int iNrRepeatedPositions , int iAnalogInput ); 
fcns.thunkname{fcnNum}='int32int32cstringdoublecstringdoubledoubleint32int32Thunk';fcns.name{fcnNum}='PI_AAP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'cstring', 'double', 'double', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FIO ( int ID , const char * szAxis1 , double dLength1 , const char * szAxis2 , double dLength2 , double dThreshold , double dLinearStep , double dAngleScan , int iAnalogInput ); 
fcns.thunkname{fcnNum}='int32int32cstringdoublecstringdoubledoubledoubledoubleint32Thunk';fcns.name{fcnNum}='PI_FIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'cstring', 'double', 'double', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FLM ( int ID , const char * szAxis , double dLength , double dThreshold , int iAnalogInput , int iDirection ); 
fcns.thunkname{fcnNum}='int32int32cstringdoubledoubleint32int32Thunk';fcns.name{fcnNum}='PI_FLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'double', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FLS ( int ID , const char * szAxis , double dLength , double dThreshold , int iAnalogInput , int iDirection ); 
fcns.thunkname{fcnNum}='int32int32cstringdoubledoubleint32int32Thunk';fcns.name{fcnNum}='PI_FLS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'double', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FSA ( int ID , const char * szAxis1 , double dLength1 , const char * szAxis2 , double dLength2 , double dThreshold , double dDistance , double dAlignStep , int iAnalogInput ); 
fcns.thunkname{fcnNum}='int32int32cstringdoublecstringdoubledoubledoubledoubleint32Thunk';fcns.name{fcnNum}='PI_FSA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'cstring', 'double', 'double', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FSC ( int ID , const char * szAxis1 , double dLength1 , const char * szAxis2 , double dLength2 , double dThreshold , double dDistance , int iAnalogInput ); 
fcns.thunkname{fcnNum}='int32int32cstringdoublecstringdoubledoubledoubleint32Thunk';fcns.name{fcnNum}='PI_FSC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'cstring', 'double', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FSM ( int ID , const char * szAxis1 , double dLength1 , const char * szAxis2 , double dLength2 , double dThreshold , double dDistance , int iAnalogInput ); 
fcns.thunkname{fcnNum}='int32int32cstringdoublecstringdoubledoubledoubleint32Thunk';fcns.name{fcnNum}='PI_FSM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'cstring', 'double', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qFSS ( int ID , int * piResult ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qFSS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_FGC ( int ID , const char * szProcessIds , const double * pdScanAxisCenterValueArray , const double * pdStepAxisCenterValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_FGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qFGC ( int ID , const char * szProcessIds , double * pdScanAxisCenterValueArray , double * pdStepAxisCenterValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qFGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_FRC ( int ID , const char * szProcessIdBase , const char * szProcessIdsCoupled ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_FRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qFRC ( int ID , const char * szProcessIdsBase , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qFRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTCI ( int ID , const int * piFastAlignmentInputIdsArray , double * pdCalculatedInputValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTCI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SIC ( int ID , int iFastAlignmentInputId , int iCalcType , const double * pdParameters , int iNumberOfParameters ); 
fcns.thunkname{fcnNum}='int32int32int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_SIC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSIC ( int ID , const int * piFastAlignmentInputIdsArray , int iNumberOfInputIds , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32cstringint32Thunk';fcns.name{fcnNum}='PI_qSIC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_FDR ( int ID , const char * szScanRoutineName , const char * szScanAxis , const double dScanAxisRange , const char * szStepAxis , const double dStepAxisRange , const char * szParameters ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringdoublecstringdoublecstringThunk';fcns.name{fcnNum}='PI_FDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'double', 'cstring', 'double', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_FDG ( int ID , const char * szScanRoutineName , const char * szScanAxis , const char * szStepAxis , const char * szParameters ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringThunk';fcns.name{fcnNum}='PI_FDG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_FRS ( int ID , const char * szScanRoutineNames ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_FRS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_FRP ( int ID , const char * szScanRoutineNames , const int * piOptionsArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_FRP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qFRP ( int ID , const char * szScanRoutineNames , int * piOptionsArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qFRP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qFRR ( int ID , const char * szScanRoutineNames , int iResultId , char * szResult , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32cstringint32Thunk';fcns.name{fcnNum}='PI_qFRR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qFRRArray ( int ID , const char * szScanRoutineNames , const int * iResultIds , char * szResult , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qFRRArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qFRH ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qFRH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SGA ( int ID , const int * piAnalogChannelIds , const int * piGainValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_SGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSGA ( int ID , const int * piAnalogChannelIds , int * piGainValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qSGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_NAV ( int ID , const int * piAnalogChannelIds , const int * piNrReadingsValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_NAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qNAV ( int ID , const int * piAnalogChannelIds , int * piNrReadingsValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qNAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetDynamicMoveBufferSize ( int ID , int * iSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_GetDynamicMoveBufferSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qCOV ( int ID , const int * piChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qCOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_MOD ( int ID , const char * szItems , const unsigned int * iModeArray , const char * szValues ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrcstringThunk';fcns.name{fcnNum}='PI_MOD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qMOD ( int ID , const char * szItems , const unsigned int * iModeArray , char * szValues , int iMaxValuesSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qMOD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qDIA ( int ID , const unsigned int * iIDArray , char * szValues , int iBufferSize , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrcstringint32int32Thunk';fcns.name{fcnNum}='PI_qDIA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHDI ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qHDI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHIS ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qHIS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_HIS ( int ID , const int * iDeviceIDsArray , const int * iItemIDsArray , const int * iPropertyIDArray , const char * szValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_HIS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHIE ( int ID , const int * iDeviceIDsArray , const int * iAxesIDsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qHIE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHIB ( int ID , const int * iDeviceIDsArray , const int * iButtonIDsArray , int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qHIB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_HIL ( int ID , const int * iDeviceIDsArray , const int * iLED_IDsArray , const int * pnValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_HIL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHIL ( int ID , const int * iDeviceIDsArray , const int * iLED_IDsArray , int * pnValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qHIL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_HIN ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_HIN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qHIN ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qHIN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_HIA ( int ID , const char * szAxes , const int * iFunctionArray , const int * iDeviceIDsArray , const int * iAxesIDsArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_HIA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qHIA ( int ID , const char * szAxes , const int * iFunctionArray , int * iDeviceIDsArray , int * iAxesIDsArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qHIA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_HDT ( int ID , const int * iDeviceIDsArray , const int * iAxisIDsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_HDT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHDT ( int ID , const int * iDeviceIDsArray , const int * iAxisIDsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qHDT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_HIT ( int ID , const int * piTableIdsArray , const int * piPointNumberArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_HIT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qHIT ( int ID , const int * piTableIdsArray , int iNumberOfTables , int iOffsetOfFirstPointInTable , int iNumberOfValues , double ** pdValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qHIT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qMAN ( int ID , const char * szCommand , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qMAN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_KSF ( int ID , const char * szNameOfCoordSystem ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_KSF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_KEN ( int ID , const char * szNameOfCoordSystem ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_KEN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_KRM ( int ID , const char * szNameOfCoordSystem ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_KRM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_KLF ( int ID , const char * szNameOfCoordSystem ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_KLF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_KSD ( int ID , const char * szNameOfCoordSystem , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_KSD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_KST ( int ID , const char * szNameOfCoordSystem , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_KST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_KSW ( int ID , const char * szNameOfCoordSystem , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_KSW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_KLD ( int ID , const char * szNameOfCoordSystem , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_KLD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_KSB ( int ID , const char * szNameOfCoordSystem , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_KSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_MRT ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_MRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_MRW ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_MRW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qKLT ( int ID , const char * szStartCoordSystem , const char * szEndCoordSystem , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_qKLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qKEN ( int ID , const char * szNamesOfCoordSystems , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qKEN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qKET ( int ID , const char * szTypes , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qKET'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qKLS ( int ID , const char * szNameOfCoordSystem , const char * szItem1 , const char * szItem2 , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_qKLS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_KLN ( int ID , const char * szNameOfChild , const char * szNameOfParent ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_KLN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qKLN ( int ID , const char * szNamesOfCoordSystems , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qKLN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTRA ( int ID , const char * szAxes , const double * pdComponents , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qTRA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qKLC ( int ID , const char * szNameOfCoordSystem1 , const char * szNameOfCoordSystem2 , const char * szItem1 , const char * szItem2 , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_qKLC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_KCP ( int ID , const char * szSource , const char * szDestination ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_KCP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_TGA ( int ID , const int * piTrajectoriesArray , const double * pdValarray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_TGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TGC ( int ID , const int * piTrajectoriesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_TGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TGF ( int ID , const int * piTrajectoriesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_TGF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TGS ( int ID , const int * piTrajectoriesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='PI_TGS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTGL ( int ID , const int * piTrajectoriesArray , int * iTrajectorySizesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='PI_qTGL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_TGT ( int ID , int iTrajectoryTiming ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='PI_TGT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qTGT ( int ID , int * iTrajectoryTiming ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_qTGT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_FSF ( int ID , const char * szAxis , double forceValue1 , double positionOffset , BOOL useForceValue2 , double forceValue2 ); 
fcns.thunkname{fcnNum}='int32int32cstringdoubledoubleint32doubleThunk';fcns.name{fcnNum}='PI_FSF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'double', 'double', 'int32', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_qFSF ( int ID , const char * szAxes , double * pForceValue1Array , double * pPositionOffsetArray , double * pForceValue2Array ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PI_qFSF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qFSR ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qFSR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_GetSupportedParameters ( int ID , int * piParameterIdArray , int * piCommandLevelArray , int * piMemoryLocationArray , int * piDataTypeArray , int * piNumberOfItems , const int iiBufferSize , char * szParameterName , const int iMaxParameterNameSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrint32cstringint32Thunk';fcns.name{fcnNum}='PI_GetSupportedParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetSupportedControllers ( char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='PI_GetSupportedControllers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  PI_GetAsyncBufferIndex ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_GetAsyncBufferIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetAsyncBuffer ( int ID , double ** pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='PI_GetAsyncBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtrPtr'};fcnNum=fcnNum+1;
% BOOL  PI_AddStage ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_AddStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_RemoveStage ( int ID , const char * szStageName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_RemoveStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_OpenUserStagesEditDialog ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_OpenUserStagesEditDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_OpenPiStagesEditDialog ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_OpenPiStagesEditDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WriteConfigurationFromDatabaseToController ( int ID , const char * szFilter , const char * szConfigurationName , char * szWarnings , int warningsBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_WriteConfigurationFromDatabaseToController'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_WriteConfigurationFromDatabaseToControllerAndSave ( int ID , const char * szFilter , const char * szConfigurationName , char * szWarnings , int warningsBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_WriteConfigurationFromDatabaseToControllerAndSave'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_ReadConfigurationFromControllerToDatabase ( int ID , const char * szFilter , const char * szConfigurationName , char * szWarnings , int warningsBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_ReadConfigurationFromControllerToDatabase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetAvailableControllerConfigurationsFromDatabase ( int ID , char * szConfigurationNames , int configurationNamesBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_GetAvailableControllerConfigurationsFromDatabase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetAvailableControllerConfigurationsFromDatabaseByType ( int ID , char * szConfigurationNames , int configurationNamesBufferSize , unsigned int configurationType ); 
fcns.thunkname{fcnNum}='int32int32cstringint32uint32Thunk';fcns.name{fcnNum}='PI_GetAvailableControllerConfigurationsFromDatabaseByType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'uint32'};fcnNum=fcnNum+1;
% BOOL  PI_IsAvailable ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='PI_IsAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetDllVersionInformation ( int ID , char * dllVersionsInformationBuffer , int bufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_GetDllVersionInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_GetPIStages3VersionInformation ( int ID , char * piStages3VersionsInformationBuffer , int bufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_GetPIStages3VersionInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_POL ( int ID , const char * szAxes , const int * iValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_POL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_STD ( int ID , int tableType , int tableID , const char * data ); 
fcns.thunkname{fcnNum}='int32int32int32int32cstringThunk';fcns.name{fcnNum}='PI_STD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_RTD ( int ID , int tableType , int tableID , const char * name ); 
fcns.thunkname{fcnNum}='int32int32int32int32cstringThunk';fcns.name{fcnNum}='PI_RTD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qRTD ( int ID , int tableType , int tableID , int infoID , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qRTD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qLST ( int ID , char * buffer , int bufsize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qLST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_DLT ( int ID , const char * name ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_DLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_REC_START ( int ID , const char * recorderIds ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_REC_START'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_REC_STOP ( int ID , const char * recorderIds ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_REC_STOP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_REC_RATE ( int ID , const char * recorderId , int rate ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_REC_RATE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qREC_RATE ( int ID , const char * recorderIds , int * rateValues ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qREC_RATE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_REC_TRACE ( int ID , const char * recorderId , int traceId , const char * containerUnitId , const char * functionUnitId , const char * parameterId ); 
fcns.thunkname{fcnNum}='int32int32cstringint32cstringcstringcstringThunk';fcns.name{fcnNum}='PI_REC_TRACE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_REC_TRG ( int ID , const char * recorderId , const char * triggerMode , const char * triggerOption1 , const char * triggerOption2 ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringThunk';fcns.name{fcnNum}='PI_REC_TRG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qREC_NUM ( int ID , const char * recorderIds , int * numDataValues ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qREC_NUM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qREC_STATE ( int ID , const char * recorderIds , char * statesBuffer , int statesBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qREC_STATE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qREC_TRG ( int ID , const char * recorderIds , char * triggerConfigurationBuffer , int triggerConfigurationBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qREC_TRG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qREC_TRACE ( int ID , const char * recorderId , int traceIndex , char * traceConfigurationBuffer , int traceConfigurationBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32cstringint32Thunk';fcns.name{fcnNum}='PI_qREC_TRACE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qREC_DAT ( int ID , const char * recorderId , const char * dataFormat , int offset , int numberOfValue , int * traceIndices , int numberOfTraceIndices , double ** dataValues , char * gcsArrayHeaderBuffer , int gcsArrayHeaderBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32int32voidPtrint32voidPtrcstringint32Thunk';fcns.name{fcnNum}='PI_qREC_DAT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32', 'int32', 'int32Ptr', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_UCL ( int ID , const char * userCommandLevel , const char * password ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='PI_UCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qUCL ( int ID , char * userCommandLevel , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qUCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qIPR ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qIPR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qUSG ( int ID , char * usg , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qUSG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qUSG_CMD ( int ID , const char * chapter , char * usg , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qUSG_CMD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qUSG_SYS ( int ID , const char * chapter , char * usg , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qUSG_SYS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qUSG_PAM ( int ID , const char * chapter , char * usg , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qUSG_PAM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qUSG_HW ( int ID , const char * chapter , char * usg , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qUSG_HW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qUSG_PROP ( int ID , const char * chapter , char * usg , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='PI_qUSG_PROP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qLOG ( int ID , int startIndex , char * errorLog , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32int32cstringint32Thunk';fcns.name{fcnNum}='PI_qLOG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SPV_Int32 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , INT32 value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_SPV_Int32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_SPV_UInt32 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , UINT32 value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringuint32Thunk';fcns.name{fcnNum}='PI_SPV_UInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL  PI_SPV_Int64 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , INT64 value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringint64Thunk';fcns.name{fcnNum}='PI_SPV_Int64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'int64'};fcnNum=fcnNum+1;
% BOOL  PI_SPV_UInt64 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , UINT64 value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringuint64Thunk';fcns.name{fcnNum}='PI_SPV_UInt64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% BOOL  PI_SPV_Double ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , double value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringdoubleThunk';fcns.name{fcnNum}='PI_SPV_Double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'double'};fcnNum=fcnNum+1;
% BOOL  PI_SPV_String ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , const char * value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringcstringThunk';fcns.name{fcnNum}='PI_SPV_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , char * answer , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_qSPV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV_Int32 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , INT32 * value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSPV_Int32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV_UInt32 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , UINT32 * value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSPV_UInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV_Int64 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , INT64 * value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSPV_Int64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV_UInt64 ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , UINT64 * value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSPV_UInt64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'uint64Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV_Double ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , double * value ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSPV_Double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSPV_String ( int ID , const char * memType , const char * containerUnit , const char * functionUnit , const char * parameter , char * value , int bufSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringcstringint32Thunk';fcns.name{fcnNum}='PI_qSPV_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  PI_CPA ( int ID , const char * sourceMemType , const char * targetMemType , const char * containerUnit , const char * functionUnit , const char * parameter ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringcstringcstringThunk';fcns.name{fcnNum}='PI_CPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_qSTV ( int ID , const char * containerUnit , unsigned int * statusArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSTV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_SAM ( int ID , const char * axisContainerUnit , unsigned int axisOperationMode ); 
fcns.thunkname{fcnNum}='int32int32cstringuint32Thunk';fcns.name{fcnNum}='PI_SAM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOL  PI_qSAM ( int ID , const char * axisContainerUnit , unsigned int * axesOperationModesArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSAM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PI_RES ( int ID , const char * axisContainerUnit ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='PI_RES'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  PI_SMV ( int ID , const char * axisContainerUnitsArray , const double * numberOfStepsArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_SMV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSMV ( int ID , const char * axisContainerUnit , double * commandedSteps ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSMV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qSMR ( int ID , const char * axisContainerUnit , double * remainingSteps ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qSMR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_OCV ( int ID , const char * axisContainerUnitsArray , const double * controlValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_OCV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  PI_qOCV ( int ID , const char * axisContainerUnit , double * controlValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='PI_qOCV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
methodinfo=fcns;