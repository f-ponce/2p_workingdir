function [methodinfo,structs,enuminfo,ThunkLibName]=PI_HydraPollux_GCS2_DLL_prototype_x64
%PI_HYDRAPOLLUX_GCS2_DLL_PROTOTYPE_X64 Create structures to define interfaces found in 'PI_HydraPollux_GCS2_DLL'.

%This function was generated by loadlibrary.m parser version  on Tue Nov  8 08:29:50 2016
%perl options:'PI_HydraPollux_GCS2_DLL.i -outfile=PI_HydraPollux_GCS2_DLL_prototype_x64.m -thunkfile=HydraPollux_thunk_pcwin64.c -header=PI_HydraPollux_GCS2_DLL.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'HydraPollux_thunk_pcwin64');
% int  __stdcall Hydra_ConnectRS232 ( int nPortNr , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='Hydra_ConnectRS232'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  __stdcall ConnectRS232ByDevName ( const char * szDescription , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='ConnectRS232ByDevName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  __stdcall Hydra_ConnectRS232ByDevName ( const char * szDescription , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_ConnectRS232ByDevName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  __stdcall Hydra_ConnectTCPIP ( const char * szHostname , int port ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_ConnectTCPIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  __stdcall Hydra_ConnectTCPIPByDescription ( const char * szDescription ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='Hydra_ConnectTCPIPByDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  __stdcall Hydra_SetTimeout ( int ID , int timeoutInMS ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='Hydra_SetTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_IsConnected ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='Hydra_IsConnected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void  __stdcall Hydra_CloseConnection ( int ID ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='Hydra_CloseConnection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  __stdcall Hydra_GetError ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='Hydra_GetError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_SetErrorCheck ( int ID , BOOL bErrorCheck ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='Hydra_SetErrorCheck'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_TranslateError ( int errNr , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_TranslateError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_GcsCommandset ( int ID , const char * szCommand ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_GcsCommandset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_GcsGetAnswer ( int ID , char * szAnswer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_GcsGetAnswer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_GcsGetAnswerSize ( int ID , int * iAnswerSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='Hydra_GcsGetAnswerSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qSAI ( int ID , char * szAxes , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qSAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qSAI_ALL ( int ID , char * szAxes , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qSAI_ALL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qERR ( int ID , int * pnError ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='Hydra_qERR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qIDN ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qIDN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qHLP ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qHLP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qCSV ( int ID , double * pdCommandSyntaxVersion ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='Hydra_qCSV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qHPA ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qHPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_MOV ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_MOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qMOV ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qMOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_MVR ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_MVR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_MVE ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_MVE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_POS ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_POS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_ACC ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_ACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qACC ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qDEC ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qDEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qPOS ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qPOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_VEL ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_VEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qVEL ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qVEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_IsMoving ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_IsMoving'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_HLT ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_HLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_STP ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='Hydra_STP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qONT ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qONT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qCST ( int ID , const char * szAxes , char * szNames , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='Hydra_qCST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_CST ( int ID , const char * szAxes , const char * szNames ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='Hydra_CST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qVST ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qVST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_RBT ( int ID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='Hydra_RBT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qVER ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qVER'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qTVI ( int ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='Hydra_qTVI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_IFC ( int ID , const char * szParameters , const char * szValues ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='Hydra_IFC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qIFC ( int ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='Hydra_qIFC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qIFS ( int ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringint32Thunk';fcns.name{fcnNum}='Hydra_qIFS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_DFH ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_DFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qDFH ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qDFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_GOH ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_GOH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_SVO ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_SVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qSVO ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qSVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qSMO ( int ID , const char * szAxes , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qSMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_RON ( int ID , const char * szAxes , const BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_RON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qRON ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qRON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_SPA ( int ID , const char * szAxes , const unsigned int * iParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='Hydra_SPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qSPA ( int ID , const char * szAxes , unsigned int * iParameterArray , double * pdValueArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='Hydra_qSPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_WPA ( int ID , const char * szPassword , const char * szAxes , const unsigned int * iParameterArray ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_WPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_SAI ( int ID , const char * szOldAxes , const char * szNewAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringThunk';fcns.name{fcnNum}='Hydra_SAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qLIM ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qLIM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qTRS ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qTRS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_FNL ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_FNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_FPL ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_FPL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_FRF ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_FRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_INI ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_INI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_FED ( int ID , const char * szAxes , const int * piEdgeArray , const int * piParamArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Hydra_FED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qFRF ( int ID , const char * szAxes , BOOL * pbValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qFRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_DIO ( int ID , const int * piChannelsArray , const BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Hydra_DIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qDIO ( int ID , const int * piChannelsArray , BOOL * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='Hydra_qDIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qTIO ( int ID , int * piInputNr , int * piOutputNr ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='Hydra_qTIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_IsControllerReady ( int ID , int * piControllerReady ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='Hydra_IsControllerReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qSRG ( int ID , const char * szAxes , const int * iRegisterArray , int * iValArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Hydra_qSRG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qTMN ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qTMN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_qTMX ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='Hydra_qTMX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_AddStage ( int ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_AddStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  __stdcall Hydra_RemoveStage ( int ID , const char * szStageName ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='Hydra_RemoveStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
methodinfo=fcns;